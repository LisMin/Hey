/**
 * Created by hey on 2017/2/28.
 */
var HEY;
(function (HEY) {
    HEY.gl = null;
    var vao = null;
    var program = null;
    function init() {
        var vertices = new Float32Array([
            -0.5, -0.5, 0.0,
            0.5, -0.5, 0.0,
            0.0, 0.5, 0.0
        ]);
        var canvas = document.getElementById("render_canvas");
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        var renderer = new HEY.WebGL2Renderer({ canvas: canvas });
        HEY.gl = renderer.gl;
        var vertexShader = HEY.gl.createShader(HEY.gl.VERTEX_SHADER);
        HEY.gl.shaderSource(vertexShader, HEY.ShaderLib.v_default);
        HEY.gl.compileShader(vertexShader);
        var succ = HEY.gl.getShaderParameter(vertexShader, HEY.gl.COMPILE_STATUS);
        if (!succ) {
            var log = HEY.gl.getShaderInfoLog(vertexShader);
            console.log("compile shader error:", log);
            return;
        }
        var fragmentShader = HEY.gl.createShader(HEY.gl.FRAGMENT_SHADER);
        HEY.gl.shaderSource(fragmentShader, HEY.ShaderLib.f_default);
        HEY.gl.compileShader(fragmentShader);
        succ = HEY.gl.getShaderParameter(fragmentShader, HEY.gl.COMPILE_STATUS);
        if (!succ) {
            var log = HEY.gl.getShaderInfoLog(fragmentShader);
            console.log(log);
            return;
        }
        program = HEY.gl.createProgram();
        HEY.gl.attachShader(program, vertexShader);
        HEY.gl.attachShader(program, fragmentShader);
        HEY.gl.linkProgram(program);
        succ = HEY.gl.getProgramParameter(program, HEY.gl.LINK_STATUS);
        if (!succ) {
            var log = HEY.gl.getProgramInfoLog(program);
            console.log(log);
            return;
        }
        HEY.gl.deleteShader(vertexShader);
        HEY.gl.deleteShader(fragmentShader);
        vao = HEY.gl.createVertexArray();
        HEY.gl.bindVertexArray(vao);
        var buffer = HEY.gl.createBuffer();
        HEY.gl.bindBuffer(HEY.gl.ARRAY_BUFFER, buffer);
        HEY.gl.bufferData(HEY.gl.ARRAY_BUFFER, vertices, HEY.gl.STATIC_DRAW);
        HEY.gl.vertexAttribPointer(0, 3, HEY.gl.FLOAT, false, 0, 0);
        HEY.gl.enableVertexAttribArray(0);
        HEY.gl.bindVertexArray(null);
        return;
    }
    HEY.init = init;
    function render() {
        HEY.gl.bindVertexArray(vao);
        HEY.gl.useProgram(program);
        HEY.gl.drawArrays(HEY.gl.TRIANGLES, 0, 3);
        HEY.gl.bindVertexArray(null);
    }
    HEY.render = render;
})(HEY || (HEY = {}));
/**
 * Created by ll on 2017/3/1.
 */
var HEY;
(function (HEY) {
    var Rectangle = (function () {
        function Rectangle() {
            this.program = null;
            this.vao = null;
            this.texture = null;
            this.gl = null;
            var gl = HEY.gl;
            var vertices = new Float32Array([
                //position     //colors        //uvs
                -0.2, 0.2, 0, 1.0, 0., 0., 0., 1.,
                -0.2, -0.2, 0, 0., 1., 0., 0., 0.,
                0.2, 0.2, 0, 0., 0., 1., 1., 1.,
                0.2, -0.2, 0, 1., 1., 0., 1., 0.,
            ]);
            var indices = new Uint16Array([
                0, 1, 2,
                2, 1, 3
            ]);
            var ebo = gl.createBuffer();
            var vbo = gl.createBuffer();
            var vao = gl.createVertexArray();
            gl.bindVertexArray(vao);
            gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
            gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 8 * Float32Array.BYTES_PER_ELEMENT, 0);
            gl.enableVertexAttribArray(0);
            gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 8 * Float32Array.BYTES_PER_ELEMENT, 3 * Float32Array.BYTES_PER_ELEMENT);
            gl.enableVertexAttribArray(1);
            gl.vertexAttribPointer(2, 2, gl.FLOAT, false, 8 * Float32Array.BYTES_PER_ELEMENT, 6 * Float32Array.BYTES_PER_ELEMENT);
            gl.enableVertexAttribArray(2);
            gl.bindVertexArray(null);
            gl.bindBuffer(gl.ARRAY_BUFFER, null);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
            //init textures
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            var data = new Uint8Array([255, 255, 255, 255]);
            var image = document.createElement("img");
            image.src = "../asset/wall.jpg";
            image.onload = function (data) {
                console.log("====", data);
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data.target);
            };
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
            gl.bindTexture(gl.TEXTURE_2D, null);
            this.texture = texture;
            var shader = new HEY.Shader(HEY.ShaderLib.v_rectangle, HEY.ShaderLib.f_rectangle);
            this.program = shader.getWebglProgram();
            this.vao = vao;
            this.gl = gl;
        }
        Rectangle.prototype.render = function () {
            var gl = this.gl;
            gl.useProgram(this.program);
            gl.activeTexture(gl.TEXTURE1);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            var loc = gl.getUniformLocation(this.program, "ourTexture");
            gl.uniform1i(loc, 1);
            gl.bindVertexArray(this.vao);
            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
            gl.bindVertexArray(null);
        };
        return Rectangle;
    }());
    HEY.Rectangle = Rectangle;
})(HEY || (HEY = {}));
/**
 * Created by ll on 2017/3/1.
 */
var HEY;
(function (HEY) {
    var Shader = (function () {
        function Shader(v, f) {
            this.program = null;
            var gl = HEY.gl;
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, v);
            gl.compileShader(vertexShader);
            var succ = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);
            if (!succ) {
                var log = gl.getShaderInfoLog(vertexShader);
                console.log("compile shader error:", log);
                return;
            }
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, f);
            gl.compileShader(fragmentShader);
            succ = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);
            if (!succ) {
                var log = gl.getShaderInfoLog(fragmentShader);
                console.log(log);
                return;
            }
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            gl.deleteShader(vertexShader);
            gl.deleteShader(fragmentShader);
            succ = gl.getProgramParameter(program, gl.LINK_STATUS);
            if (!succ) {
                var log = gl.getProgramInfoLog(program);
                console.log(log);
                return;
            }
            this.program = program;
        }
        Shader.prototype.getWebglProgram = function () {
            return this.program;
        };
        return Shader;
    }());
    HEY.Shader = Shader;
})(HEY || (HEY = {}));
/**
 * Created by hey on 2017/2/28.
 */
var HEY;
(function (HEY) {
    var ShaderLib;
    (function (ShaderLib) {
        ShaderLib.v_default = "#version 300 es\n            layout (location = 0) in vec3 position;\n            void main()\n            {\n                 gl_Position = vec4(position.x, position.y, position.z, 1.0);\n            }\n        ";
        ShaderLib.f_default = "#version 300 es\n            precision highp float;\n            out vec4 color;\n            \n            void main()\n            {\n                color = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n            }\n    ";
        ShaderLib.v_rectangle = "#version 300 es\n         layout (location = 0) in vec3 position;\n         layout (location = 1) in vec3 color;\n         layout (location = 2) in vec2 uv;\n         \n         out vec3 ourColor;\n         out vec2 texCoord;\n         void main(){\n            gl_Position = vec4(position.x,position.y,position.z,1.);\n            \n            ourColor = vec3(color);\n            texCoord = uv;\n         }\n        ";
        ShaderLib.f_rectangle = "#version 300 es\n            precision highp float;\n            out vec4 color;\n            \n            in vec3 ourColor;\n            in vec2 texCoord;\n            \n            uniform sampler2D ourTexture; \n            \n            void main()\n            {\n                color = vec4(ourColor, 1.0f);\n                color = texture(ourTexture,texCoord);\n            }\n\n        ";
    })(ShaderLib = HEY.ShaderLib || (HEY.ShaderLib = {}));
})(HEY || (HEY = {}));
/**
 * Created by hey on 2017/2/28.
 */
var HEY;
(function (HEY) {
    var WebGL2Renderer = (function () {
        function WebGL2Renderer(parameters) {
            if (parameters === void 0) { parameters = null; }
            this.gl = null;
            parameters = parameters || {};
            var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'), _context = parameters.context !== undefined ? parameters.context : null, _alpha = parameters.alpha !== undefined ? parameters.alpha : false, _depth = parameters.depth !== undefined ? parameters.depth : true, _stencil = parameters.stencil !== undefined ? parameters.stencil : true, _antialias = parameters.antialias !== undefined ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;
            // initialize
            var gl;
            try {
                var attributes = {
                    alpha: _alpha,
                    depth: _depth,
                    stencil: _stencil,
                    antialias: _antialias,
                    premultipliedAlpha: _premultipliedAlpha,
                    preserveDrawingBuffer: _preserveDrawingBuffer
                };
                gl = _context || _canvas.getContext('webgl2', attributes);
                if (gl === null) {
                    if (_canvas.getContext('webgl2') !== null) {
                        throw 'Error creating WebGL2 context with your selected attributes.';
                    }
                    else {
                        throw 'Error creating WebGL2 context.';
                    }
                }
                _canvas.addEventListener('webglcontextlost', function (event) {
                    event.preventDefault();
                }, false);
            }
            catch (error) {
                console.error('THREE.WebGL2Renderer: ' + error);
            }
            this.gl = gl;
        }
        return WebGL2Renderer;
    }());
    HEY.WebGL2Renderer = WebGL2Renderer;
})(HEY || (HEY = {}));
//# sourceMappingURL=bundle.min.js.map